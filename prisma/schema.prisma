// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["postgresqlExtensions"]
}

datasource db {
    provider   = "postgresql"
    url        = env("DATABASE_URL")
    directUrl  = env("DIRECT_URL")
    extensions = [vector]
}

model User {
    id            String          @id @default(cuid())
    name          String?
    email         String          @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    password      String?
    // Optional for WebAuthn support
    Authenticator Authenticator[]

    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
    UserToProject UserToProject[]
    Question      Question[]
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
    credentialID         String  @unique
    userId               String
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([userId, credentialID])
}

model Project {
    id        String @id @default(cuid())
    name      String
    githubUrl String

    deletedAt           DateTime?
    createdAt           DateTime              @default(now())
    updatedAt           DateTime              @updatedAt
    UserToProject       UserToProject[]
    commits             Commit[]
    SourceCodeEmbedding SourceCodeEmbedding[]
    Question            Question[]
}

model UserToProject {
    id        String @id @default(cuid())
    userId    String
    projectId String

    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([userId, projectId])
}

model Commit {
    id                 String   @id @default(cuid())
    commitMessage      String
    commitHash         String
    commitAuthorName   String
    commitAuthorAvatar String
    commitDate         DateTime
    summary            String // ai generated summary
    projectId          String
    project            Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    createdAt          DateTime @default(now())
    updatedAt          DateTime @updatedAt
}

model Question {
    id       String @id @default(cuid())
    question String
    answer   String

    filesReferences Json?
    projectId       String
    project         Project @relation(fields: [projectId], references: [id])

    userId    String
    user      User     @relation(fields: [userId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model SourceCodeEmbedding {
    id String @id @default(cuid())

    summaryEmbedding Unsupported("vector(768)")?
    sourceCode       String
    fileName         String
    summary          String

    projectId String
    project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}
